/**
 * üß™ –¢–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤
 */

import { describe, test, expect } from 'bun:test';
import { InstagramCanvasService, ColorTemplate } from '../services/instagram-canvas.service';

describe('üé® Enhanced Carousel Template Selector', () => {
  
  test('üìã –ü—Ä–µ–≤—å—é –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π VibeCoding –∫–æ–Ω—Ç–µ–Ω—Ç', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ VibeCoding —Ü–∏—Ç–∞—Ç—ã –∏ –ø—Ä–∏–º–µ—Ä—ã
    const vibeCodingQuotes = [
      '–ö–æ–¥ - —ç—Ç–æ –ø–æ—ç–∑–∏—è –ª–æ–≥–∏–∫–∏',
      '–í –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∂–∏–≤–µ—Ç –¥—É—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞',
      '–ß–∏—Å—Ç—ã–π –∫–æ–¥ - –ø—É—Ç—å –∫ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—é',
      '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ - –º–µ–¥–∏—Ç–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ç–∞—Ç
    expect(vibeCodingQuotes.length).toBeGreaterThan(0);
    vibeCodingQuotes.forEach(quote => {
      expect(quote.length).toBeGreaterThan(10);
      expect(typeof quote).toBe('string');
    });
  });

  test('üé® –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–º–ø–ª–µ–π—Ç–∞', () => {
    const templates = InstagramCanvasService.getColorTemplates();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–º–Ω—ã–µ —Ç–µ–º–ø–ª–µ–π—Ç—ã –∏–º–µ—é—Ç —Å–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç
    const darkTemplates = [
      ColorTemplate.BLACK_GOLD,
      ColorTemplate.EMERALD_LUXURY,
      ColorTemplate.ROYAL_PURPLE,
      ColorTemplate.MIDNIGHT_BLUE
    ];
    
    darkTemplates.forEach(template => {
      expect(templates[template]).toBeTruthy();
      // –î–ª—è —Ç–µ–º–Ω—ã—Ö —Ç–µ–º–ø–ª–µ–π—Ç–æ–≤ –æ–∂–∏–¥–∞–µ–º —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω
      expect(templates[template].background).toMatch(/(#[0-4]|rgba?\(.*[0-9][0-9]?[^0-9])/);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤–µ—Ç–ª—ã–µ —Ç–µ–º–ø–ª–µ–π—Ç—ã –∏–º–µ—é—Ç —Ç–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
    expect(templates[ColorTemplate.WHITE]).toBeTruthy();
    expect(templates[ColorTemplate.WHITE].background).toMatch(/#ffffff/);
  });

  test('üîÑ –ö–∞—Ä—É—Å–µ–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è', () => {
    const templates = InstagramCanvasService.getColorTemplates();
    const templateKeys = Object.keys(templates);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–≤–∏–≥–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
    expect(templateKeys.length).toBeGreaterThan(2);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    let currentIndex = 0;
    
    // –í–ø–µ—Ä–µ–¥
    currentIndex = (currentIndex + 1) % templateKeys.length;
    expect(currentIndex).toBe(1);
    
    // –ù–∞–∑–∞–¥
    currentIndex = currentIndex === 0 ? templateKeys.length - 1 : currentIndex - 1;
    expect(currentIndex).toBe(0);
    
    // –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    currentIndex = templateKeys.length - 1;
    currentIndex = (currentIndex + 1) % templateKeys.length;
    expect(currentIndex).toBe(0);
  });

  test('üì± Callback –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é', () => {
    const templateKeys = Object.keys(InstagramCanvasService.getColorTemplates());
    const topicKey = 'test_topic_123';
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const nextCallback = `nav:next:${topicKey}`;
    const prevCallback = `nav:prev:${topicKey}`;
    const selectCallback = `select:${templateKeys[0]}:${topicKey}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    expect(nextCallback.split(':').length).toBe(3);
    expect(prevCallback.split(':').length).toBe(3);
    expect(selectCallback.split(':').length).toBe(3);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    const [action1, direction, topic1] = nextCallback.split(':');
    expect(action1).toBe('nav');
    expect(direction).toBe('next');
    expect(topic1).toBe(topicKey);
    
    const [action2, templateKey, topic2] = selectCallback.split(':');
    expect(action2).toBe('select');
    expect(templateKeys).toContain(templateKey);
    expect(topic2).toBe(topicKey);
  });

  test('üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ –¥–æ–ª–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () => {
    interface CarouselState {
      currentIndex: number;
      topicKey: string;
      topic: string;
      messageId: number;
    }
    
    const mockState: CarouselState = {
      currentIndex: 0,
      topicKey: 'test_123',
      topic: '—Ç–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞',
      messageId: 456
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
    expect(mockState.currentIndex).toBe(0);
    expect(mockState.topicKey).toBe('test_123');
    expect(mockState.topic).toBe('—Ç–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞');
    expect(mockState.messageId).toBe(456);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
    const templateCount = Object.keys(InstagramCanvasService.getColorTemplates()).length;
    const newIndex = (mockState.currentIndex + 1) % templateCount;
    expect(newIndex).toBeGreaterThanOrEqual(0);
    expect(newIndex).toBeLessThan(templateCount);
  });
});
