/**
 * Inngest Function: VibeCoding Automatic Broadcast
 *
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–∞—Ä—É—Å–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
 * –∏–∑ –ë–∏–±–ª–∏–∏ VibeCoding –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.
 *
 * Workflow:
 * 1. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ cron —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∫–∞–∂–¥—ã–π —á–∞—Å
 * 2. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 * 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é/—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é —Ç–µ–º—É –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã VibeCoding
 * 4. –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—É—Å–µ–ª—å —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
 * 5. –†–∞—Å—Å—ã–ª–∞–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */

import { inngest } from '../client';
import { bot } from '../../bot';
import { db } from '../../db';
import { users, userSettings } from '../../db/schema';
import { eq, and, sql } from 'drizzle-orm';
import { VibeCodingVectorService } from '../../services/vibecoding-vector.service';
import {
  InstagramCanvasService,
  ColorTemplate,
} from '../../services/instagram-canvas.service';
import { logger, LogType } from '../../utils/logger';
import type { InputMediaPhoto } from 'telegraf/types';
import type { CarouselSlide } from '../../types';

const vectorService = new VibeCodingVectorService();
const canvasService = new InstagramCanvasService();

/**
 * üìÖ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä—É–±—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
 * –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —Å–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ –∏–∑ VibeCoding –∫–Ω–∏–∂–∫–∏
 */
const DAILY_VIBECODING_THEMES = {
  // 0 = –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
  0: {
    name: '–ú–∏—Ñ—ã –∏ –†–µ–∞–ª—å–Ω–æ—Å—Ç—å VibeCoding',
    query: '–º–∏—Ñ—ã vibecoding —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–±–ª—É–∂–¥–µ–Ω–∏—è',
    categories: ['general', 'fundamentals'],
    emoji: 'üïâÔ∏è',
  },
  // 1 = –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
  1: {
    name: '–û—Å–Ω–æ–≤—ã –∏ –§–∏–ª–æ—Å–æ—Ñ–∏—è VibeCoding',
    query: '–±–∏–±–ª–∏—è vibecoding –æ—Å–Ω–æ–≤—ã —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –ø—Ä–∏–Ω—Ü–∏–ø—ã',
    categories: ['fundamentals', 'main_book'],
    emoji: 'üìñ',
  },
  // 2 = –í—Ç–æ—Ä–Ω–∏–∫
  2: {
    name: 'Cursor AI –∏ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    query: 'cursor ai –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
    categories: ['tools'],
    emoji: 'üõ†Ô∏è',
  },
  // 3 = –°—Ä–µ–¥–∞
  3: {
    name: '–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω—ã–µ –ü—Ä–∞–∫—Ç–∏–∫–∏ –∏ Flow',
    query: '–º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ—Ç–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
    categories: ['practices'],
    emoji: 'üßò‚Äç‚ôÇÔ∏è',
  },
  // 4 = –ß–µ—Ç–≤–µ—Ä–≥
  4: {
    name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ Roadmap',
    query: '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ roadmap –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –ø—Ä–æ–¥–∞–∫—à–µ–Ω',
    categories: ['development'],
    emoji: 'üöÄ',
  },
  // 5 = –ü—è—Ç–Ω–∏—Ü–∞
  5: {
    name: 'AI-–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã 2025',
    query: 'ai –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã 2025 –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤—ã–µ',
    categories: ['tools', 'analytics'],
    emoji: 'ü§ñ',
  },
  // 6 = –°—É–±–±–æ—Ç–∞
  6: {
    name: '–ö–æ–Ω—Ç–µ–Ω—Ç –∏ Telegram',
    query: 'telegram –ø–æ—Å—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω—ã –ø—Ä–æ–¥–∞—é—â–∏–µ',
    categories: ['general'],
    emoji: 'üì±',
  },
} as const;

/**
 * üé≠ Fallback –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã –¥–Ω—è
 */
function getFallbackContent(theme: any) {
  const fallbackContentMap: Record<string, { title: string; content: string }> =
    {
      '–û—Å–Ω–æ–≤—ã –∏ –§–∏–ª–æ—Å–æ—Ñ–∏—è VibeCoding': {
        title: 'üßò‚Äç‚ôÇÔ∏è –§–∏–ª–æ—Å–æ—Ñ–∏—è VibeCoding',
        content: `# –ü—É—Ç—å VibeCoder'–∞

VibeCoding ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, —ç—Ç–æ **–º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞**.

## üå± –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:

**üí´ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞** - –í–æ–π–¥–∏ –≤ –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–æ–¥–∏–Ω–≥–æ–º. –û—Ç–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞—Å—Ç—Ä–æ–π —Å—Ä–µ–¥—É, –¥—ã—à–∏ –≥–ª—É–±–æ–∫–æ.

**üéØ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ** - –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∞ —Å –ø–æ–ª–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –µ—ë —Ü–µ–ª–∏ –∏ –º–µ—Å—Ç–∞ –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.

**‚ö° –ö–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ —Å–∫–æ—Ä–æ—Å—Ç–∏** - –õ—É—á—à–µ –Ω–∞–ø–∏—Å–∞—Ç—å 10 —Å—Ç—Ä–æ–∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞, —á–µ–º 100 —Å—Ç—Ä–æ–∫ —Ö–∞–æ—Å–∞.

VibeCoding ‚Äî —ç—Ç–æ –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏ –º–µ–∂–¥—É —Ä–∞–∑—É–º–æ–º –∏ –∫–æ–¥–æ–º.`,
      },
      'Cursor AI –∏ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': {
        title: 'üõ†Ô∏è –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ Cursor AI',
        content: `# Cursor AI ‚Äî –¢–≤–æ–π –¶–∏—Ñ—Ä–æ–≤–æ–π –ù–∞–ø–∞—Ä–Ω–∏–∫

Cursor AI –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ **–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –∫–æ–¥–æ–º**.

## üöÄ –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

**üí¨ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π AI** - Cursor –ø–æ–Ω–∏–º–∞–µ—Ç –≤—Å—é —Ç–≤–æ—é –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.

**‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –ù–∞–∂–º–∏ Cmd+K –∏ –æ–ø–∏—à–∏ —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å. AI —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∑–∞ —Å–µ–∫—É–Ω–¥—ã.

–° Cursor AI —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—à—å –∫–æ–¥ ‚Äî —Ç—ã **—Ç–≤–æ—Ä–∏—à—å —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è**.`,
      },
      '–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω—ã–µ –ü—Ä–∞–∫—Ç–∏–∫–∏ –∏ Flow': {
        title: 'üßò‚Äç‚ôÇÔ∏è –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
        content: `# –í–æ–π–¥–∏ –≤ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–æ—Ç–æ–∫–∞

–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ **–∏—Å–∫—É—Å—Å—Ç–≤–æ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –≤ –∫–æ–¥–µ**.

## üå∏ –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è Flow:

**üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª** - –ù–∞—á–∏–Ω–∞–π –¥–µ–Ω—å —Å 5-–º–∏–Ω—É—Ç–Ω–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏. –ù–∞—Å—Ç—Ä–æ–π –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥.

**‚è∞ –¢–µ—Ö–Ω–∏–∫–∞ Pomodoro** - 25 –º–∏–Ω—É—Ç –≥–ª—É–±–æ–∫–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏, 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞. –ü–æ–≤—Ç–æ—Ä—è–π —Ü–∏–∫–ª—ã.

–ü–æ–º–Ω–∏: **–ª—É—á—à–∏–π –∫–æ–¥ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ–∫–æ—è**.`,
      },
      '–ú–∏—Ñ—ã –∏ –†–µ–∞–ª—å–Ω–æ—Å—Ç—å VibeCoding': {
        title: 'üïâÔ∏è –ú–∏—Ñ—ã –æ VibeCoding',
        content: `# –†–∞–∑–≤–µ–Ω—á–∏–≤–∞–µ–º –ú–∏—Ñ—ã

VibeCoding –æ–∫—Ä—É–∂—ë–Ω –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º **–∑–∞–±–ª—É–∂–¥–µ–Ω–∏–π –∏ —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–æ–≤**.

## ‚ú® –ò—Å—Ç–∏–Ω–Ω–∞—è —Å—É—Ç—å:

VibeCoding ‚Äî —ç—Ç–æ **—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –∫–∞—á–µ—Å—Ç–≤–∞** –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏. –≠—Ç–æ –Ω–µ –ø—Ä–æ —Å–∫–æ—Ä–æ—Å—Ç—å, –∞ –ø—Ä–æ **—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π**.

–ü–æ–º–Ω–∏: **–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –∫–æ–¥ –±—ã—Å—Ç—Ä–æ, –∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ**.`,
      },
    };

  return (
    fallbackContentMap[theme.name] || {
      title: 'üßò‚Äç‚ôÇÔ∏è VibeCoding –ú—É–¥—Ä–æ—Å—Ç—å',
      content: `# –ü—É—Ç—å VibeCoder'–∞

VibeCoding ‚Äî —ç—Ç–æ –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.

## –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ  
- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
- –ö–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
- –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ

–°–æ–∑–¥–∞–≤–∞–π –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–¥, –∞ —Ü–∏—Ñ—Ä–æ–≤—É—é –≥–∞—Ä–º–æ–Ω–∏—é.`,
    }
  );
}

/**
 * üé≤ –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º—É –¥–Ω—è –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É
 */
function getDailyTheme() {
  const today = new Date();
  const dayOfWeek = today.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, etc.

  const theme =
    DAILY_VIBECODING_THEMES[dayOfWeek as keyof typeof DAILY_VIBECODING_THEMES];

  logger.info(`üìÖ –í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ –¥–Ω—è: ${theme.name}`, {
    type: LogType.BUSINESS_LOGIC,
    data: {
      dayOfWeek,
      themeName: theme.name,
      categories: theme.categories,
      query: theme.query,
    },
  });

  return theme;
}

/**
 * üé® –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç VibeCoding –≤ —Å–ª–∞–π–¥—ã –∫–∞—Ä—É—Å–µ–ª–∏
 */
function convertVibeCodingToSlides(
  content: string,
  title: string
): CarouselSlide[] {
  const lines = content.split('\n').filter(line => line.trim());
  const slides: CarouselSlide[] = [];

  // –°–ª–∞–π–¥ 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫
  slides.push({
    order: 1,
    type: 'title',
    title: `üßò‚Äç‚ôÇÔ∏è ${title}`,
    content: '–ü—É—Ç—å –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ VibeCoding',
  });

  // –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –±–ª–æ–∫–∏
  let currentSlideContent = '';
  let slideCount = 2;

  for (const line of lines) {
    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–∞–π–¥
    if (
      line.startsWith('#') ||
      line.startsWith('##') ||
      line.startsWith('###')
    ) {
      if (currentSlideContent.trim()) {
        slides.push({
          order: slideCount++,
          type: 'principle',
          title:
            currentSlideContent.split('\n')[0] ||
            `üí° –ü—Ä–∏–Ω—Ü–∏–ø ${slideCount - 2}`,
          content:
            currentSlideContent.slice(currentSlideContent.indexOf('\n') + 1) ||
            line,
        });
        currentSlideContent = '';
      }
      currentSlideContent = line.replace(/^#+\s*/, '') + '\n';
    } else if (line.includes('**') || line.includes('*')) {
      // –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
      if (currentSlideContent.trim()) {
        slides.push({
          order: slideCount++,
          type: 'practice',
          title: `‚ö° –ü—Ä–∞–∫—Ç–∏–∫–∞`,
          content: currentSlideContent,
        });
        currentSlideContent = '';
      }
      currentSlideContent = line + '\n';
    } else {
      currentSlideContent += line + '\n';
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 4 —Å–ª–∞–π–¥–æ–≤ –º–∞–∫—Å–∏–º—É–º
    if (slideCount > 4) break;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
  if (currentSlideContent.trim() && slideCount <= 4) {
    slides.push({
      order: slideCount,
      type: 'summary',
      title: 'üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ',
      content: currentSlideContent.trim(),
    });
  }

  return slides.slice(0, 4); // –ú–∞–∫—Å–∏–º—É–º 4 —Å–ª–∞–π–¥–∞
}

/**
 * üé® –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ VibeCoding –∫–∞—Ä—É—Å–µ–ª–∏
 */
export const vibeCodingBroadcast = inngest.createFunction(
  {
    id: 'vibecoding-broadcast',
    name: 'VibeCoding Hourly Broadcast',
    retries: 3,
  },
  {
    cron: '0 * * * *', // Each hour at :00
  },
  async ({ step }) => {
    const startTime = Date.now();

    try {
      // üé≤ –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –¥–Ω—è –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É
      const theme = getDailyTheme();

      // üîç –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π VibeCoding –∫–æ–Ω—Ç–µ–Ω—Ç
      const randomContent = await step.run(
        'get-random-vibecoding-content',
        async () => {
          logger.info('üîç –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π VibeCoding –∫–æ–Ω—Ç–µ–Ω—Ç', {
            type: LogType.BUSINESS_LOGIC,
          });

          // üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ
          const searchResult = await vectorService.hybridSearch(theme.query, {
            limit: 1,
          });

          // üéØ –£–ú–ù–´–ô FALLBACK: –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
          if (
            !searchResult.combinedResults ||
            searchResult.combinedResults.length === 0
          ) {
            logger.info(
              'üì¶ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–Ω—Ç–µ–Ω—Ç',
              {
                type: LogType.BUSINESS_LOGIC,
                data: { theme: theme.name },
              }
            );

            // üé≠ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π fallback –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–µ–º–∞–º –¥–Ω—è
            const fallbackContent = getFallbackContent(theme);
            return {
              title: fallbackContent.title,
              content: fallbackContent.content,
              category: theme.categories[0],
              sourceFile: 'fallback',
              theme,
            };
          }

          const result = searchResult.combinedResults[0];
          return {
            title: result.title || theme.name,
            content: result.content,
            category: result.metadata?.file_category || theme.categories[0],
            sourceFile: result.sourceFile,
            theme, // üéØ –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–º—É –¥–Ω—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ caption
          };
        }
      );

      logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', {
        type: LogType.BUSINESS_LOGIC,
        data: {
          title: randomContent.title,
          contentLength: randomContent.content.length,
        },
      });

      // üé® –®–∞–≥ 3: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–ª–∞–π–¥—ã
      const slides = await step.run('convert-to-slides', async () => {
        logger.info('üé® –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–ª–∞–π–¥—ã –∫–∞—Ä—É—Å–µ–ª–∏', {
          type: LogType.BUSINESS_LOGIC,
        });

        return convertVibeCodingToSlides(
          randomContent.content,
          randomContent.title
        );
      });

      // üé® –®–∞–≥ 4: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ —Ñ—É–Ω–∫—Ü–∏—é
      const imageBuffers = await step.run(
        'generate-carousel-images',
        async () => {
          logger.info('üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏', {
            type: LogType.BUSINESS_LOGIC,
            data: { slidesCount: slides.length },
          });

          // ü§ç –ë–ï–õ–´–ô –§–û–ù —Å –ß–ï–†–ù–´–ú –®–†–ò–§–¢–û–ú –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ VibeCoding
          const randomTemplate = ColorTemplate.WHITE;

          logger.info('üé® –í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç–æ–≤–æ–π —à–∞–±–ª–æ–Ω', {
            type: LogType.BUSINESS_LOGIC,
            data: { template: randomTemplate },
          });

          // üîß –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ –§–£–ù–ö–¶–ò–Æ!
          return await canvasService.generateCarouselImages(
            slides,
            undefined,
            randomTemplate
          );
        }
      );

      logger.info('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã', {
        type: LogType.BUSINESS_LOGIC,
        data: { imagesCount: imageBuffers.length },
      });

      // üîç –®–∞–≥ 5: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const activeUsers = await step.run('fetch-active-users', async () => {
        logger.info('üë• –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', {
          type: LogType.BUSINESS_LOGIC,
        });

        if (!db) {
          throw new Error('Database connection not available');
        }

        const usersWithSettings = await db
          .select({
            telegram_id: users.telegram_id,
            username: users.username,
            first_name: users.first_name,
            language_code: users.language_code,
            notifications_enabled: userSettings.notifications_enabled,
          })
          .from(users)
          .leftJoin(userSettings, eq(users.id, userSettings.user_id))
          .where(
            and(
              sql`${users.telegram_id} IS NOT NULL`,
              sql`(${userSettings.notifications_enabled} IS NULL OR ${userSettings.notifications_enabled} = true)`
            )
          );

        logger.info(
          `üì± –ù–∞–π–¥–µ–Ω–æ ${usersWithSettings.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
          {
            type: LogType.BUSINESS_LOGIC,
            data: { count: usersWithSettings.length },
          }
        );

        return usersWithSettings;
      });

      if (activeUsers.length === 0) {
        logger.info('ü§∑‚Äç‚ôÇÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', {
          type: LogType.BUSINESS_LOGIC,
        });
        return { success: true, message: 'No active users found' };
      }

      // üì§ –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const broadcastResults = await step.run('send-to-users', async () => {
        logger.info('üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞—Ä—É—Å–µ–ª–∏', {
          type: LogType.BUSINESS_LOGIC,
          data: { totalUsers: activeUsers.length },
        });

        let successCount = 0;
        let errorCount = 0;

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
        const mediaGroup: InputMediaPhoto[] = imageBuffers.map(
          (buffer, index) => {
            // üîß –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Buffer –¥–ª—è Telegram API
            const imageBuffer = Buffer.isBuffer(buffer)
              ? buffer
              : Buffer.from((buffer as any).data || buffer);

            return {
              type: 'photo' as const,
              media: { source: imageBuffer }, // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π Buffer —Ñ–æ—Ä–º–∞—Ç
              caption:
                index === 0
                  ? `${randomContent.theme.emoji} **${randomContent.theme.name}**\n\n` +
                    `üìù ${randomContent.title}\n\n` +
                    `üìö –ò—Å—Ç–æ—á–Ω–∏–∫: –ë–∏–±–ª–∏—è VibeCoding\n` +
                    `üìÖ ${new Date().toLocaleDateString('ru-RU', {
                      weekday: 'long',
                      day: 'numeric',
                      month: 'long',
                      timeZone: 'Europe/Moscow',
                    })}\n\n` +
                    `#VibeCoding #${randomContent.theme.name.replace(/\s+/g, '')} #–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ`
                  : undefined,
              parse_mode: 'Markdown' as const,
            };
          }
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–∞–º–∏ –ø–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const BATCH_SIZE = 10;
        for (let i = 0; i < activeUsers.length; i += BATCH_SIZE) {
          const batch = activeUsers.slice(i, i + BATCH_SIZE);

          await Promise.allSettled(
            batch.map(async user => {
              try {
                await bot.telegram.sendMediaGroup(
                  user.telegram_id,
                  mediaGroup as any
                );
                successCount++;

                logger.info(
                  `‚úÖ –ö–∞—Ä—É—Å–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}`,
                  {
                    type: LogType.BUSINESS_LOGIC,
                    data: {
                      telegram_id: user.telegram_id,
                      username: user.username,
                    },
                  }
                );
              } catch (error) {
                errorCount++;
                logger.error(
                  `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}`,
                  {
                    type: LogType.ERROR,
                    error:
                      error instanceof Error ? error : new Error(String(error)),
                    data: {
                      telegram_id: user.telegram_id,
                      username: user.username,
                    },
                  }
                );
              }
            })
          );

          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
          if (i + BATCH_SIZE < activeUsers.length) {
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        }

        return { successCount, errorCount, totalUsers: activeUsers.length };
      });

      const executionTime = Date.now() - startTime;

      logger.info('üéâ VibeCoding —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        type: LogType.BUSINESS_LOGIC,
        data: {
          ...broadcastResults,
          executionTime: `${executionTime}ms`,
          title: randomContent.title,
        },
      });

      return {
        success: true,
        message: `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${broadcastResults.successCount}/${broadcastResults.totalUsers} —É—Å–ø–µ—à–Ω–æ`,
        stats: broadcastResults,
        executionTime,
      };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ VibeCoding broadcast', {
        type: LogType.BUSINESS_LOGIC,
        error: error instanceof Error ? error : new Error(String(error)),
      });
      throw error;
    }
  }
);
