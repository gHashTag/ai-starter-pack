import { promises as fs } from 'fs';
import path from 'path';
import { VibeCodingContent } from '../types';
import { logger, LogType } from '../utils/logger';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VIBECODING –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
 */
export class VibeCodingContentService {
  private readonly docsPath: string;
  private contentCache: Map<string, VibeCodingContent[]> = new Map();

  constructor(docsPath: string = path.join(process.cwd(), 'vibecoding')) {
    this.docsPath = docsPath;
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–µ–º–µ
   */
  async searchByTopic(topic: string): Promise<VibeCodingContent[]> {
    const cacheKey = topic.toLowerCase();

    if (this.contentCache.has(cacheKey)) {
      return this.contentCache.get(cacheKey)!;
    }

    try {
      const allContent = await this.loadAllContent();
      const relevantContent = this.filterByTopic(allContent, topic);

      this.contentCache.set(cacheKey, relevantContent);
      return relevantContent;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–µ–º–µ', {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.BUSINESS_LOGIC,
        data: { topic },
      });
      return [];
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   */
  private async loadAllContent(): Promise<VibeCodingContent[]> {
    const content: VibeCodingContent[] = [];

    try {
      const categories = await this.getCategories();

      for (const category of categories) {
        const categoryPath = path.join(this.docsPath, category);
        const files = await this.getMarkdownFiles(categoryPath);

        for (const file of files) {
          const filePath = path.join(categoryPath, file);
          const fileContent = await this.parseMarkdownFile(filePath, category);
          if (fileContent) {
            content.push(fileContent);
          }
        }
      }

      // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è
      const rootFiles = await this.getMarkdownFiles(this.docsPath);
      for (const file of rootFiles) {
        const filePath = path.join(this.docsPath, file);
        const fileContent = await this.parseMarkdownFile(filePath, 'root');
        if (fileContent) {
          content.push(fileContent);
        }
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.SYSTEM,
      });
    }

    return content;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–∞–ø–æ–∫)
   */
  private async getCategories(): Promise<string[]> {
    try {
      const items = await fs.readdir(this.docsPath, { withFileTypes: true });
      return items
        .filter(item => item.isDirectory() && !item.name.startsWith('.'))
        .map(item => item.name);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π', {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.SYSTEM,
      });
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Markdown —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
   */
  private async getMarkdownFiles(dirPath: string): Promise<string[]> {
    try {
      const items = await fs.readdir(dirPath, { withFileTypes: true });
      return items
        .filter(item => item.isFile() && item.name.endsWith('.md'))
        .map(item => item.name);
    } catch (error) {
      // –ü–∞–ø–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π
      return [];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ Markdown —Ñ–∞–π–ª–∞
   */
  private async parseMarkdownFile(
    filePath: string,
    category: string
  ): Promise<VibeCodingContent | null> {
    try {
      const content = await fs.readFile(filePath, 'utf-8');
      const fileName = path.basename(filePath, '.md');

      return {
        title: this.extractTitle(content, fileName),
        content: this.cleanContent(content),
        filePath,
        category: this.normalizeCategoryName(category),
        concepts: this.extractConcepts(content),
        quotes: this.extractQuotes(content),
      };
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞', {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.SYSTEM,
        data: { filePath },
      });
      return null;
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private extractTitle(content: string, fallbackTitle: string): string {
    // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1
    const h1Match = content.match(/^#\s+(.+)$/m);
    if (h1Match) {
      return h1Match[1].trim();
    }

    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
    return fallbackTitle
      .replace(/[üìöüïâÔ∏èüî•üéØüßòüå±‚ö°üó∫Ô∏èüöÄüìäüåüüìñüìëüé¨üí•]/g, '')
      .replace(/[-_]/g, ' ')
      .trim();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  private cleanContent(content: string): string {
    return content
      .replace(/^#+\s+/gm, '') // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      .replace(/\*\*(.*?)\*\*/g, '$1') // –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
      .replace(/\*(.*?)\*/g, '$1') // –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–∏–≤
      .replace(/`(.*?)`/g, '$1') // –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–æ–¥
      .replace(/```[\s\S]*?```/g, '') // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
      .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
      .replace(/\n{3,}/g, '\n\n') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
      .trim();
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
   */
  private extractConcepts(content: string): string[] {
    const concepts: string[] = [];

    // –ò—â–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
    const boldMatches = content.match(/\*\*(.*?)\*\*/g);
    if (boldMatches) {
      concepts.push(
        ...boldMatches.map(match => match.replace(/\*\*/g, '').trim())
      );
    }

    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    const headingMatches = content.match(/^#+\s+(.+)$/gm);
    if (headingMatches) {
      concepts.push(
        ...headingMatches.map(match => match.replace(/^#+\s+/, '').trim())
      );
    }

    return [...new Set(concepts)].filter(
      concept => concept.length > 3 && concept.length < 100
    );
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç –∏ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
   */
  private extractQuotes(content: string): string[] {
    const quotes: string[] = [];

    // –ò—â–µ–º —Ü–∏—Ç–∞—Ç—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    const quoteMatches = content.match(/"([^"]+)"/g);
    if (quoteMatches) {
      quotes.push(...quoteMatches.map(quote => quote.replace(/"/g, '').trim()));
    }

    // –ò—â–µ–º –±–ª–æ–∫–∏ —Ü–∏—Ç–∞—Ç (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å >)
    const blockQuotes = content.match(/^>\s+(.+)$/gm);
    if (blockQuotes) {
      quotes.push(
        ...blockQuotes.map(quote => quote.replace(/^>\s+/, '').trim())
      );
    }

    // –ò—â–µ–º –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ –ø—Ä–∞–≤–∏–ª–∞
    const principleMatches = content.match(/^[*-]\s+(.+)$/gm);
    if (principleMatches) {
      quotes.push(
        ...principleMatches
          .map(principle => principle.replace(/^[*-]\s+/, '').trim())
          .filter(principle => principle.length > 20)
      );
    }

    return [...new Set(quotes)].filter(
      quote => quote.length > 10 && quote.length < 300
    );
  }

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–µ–º–µ
   */
  private filterByTopic(
    content: VibeCodingContent[],
    topic: string
  ): VibeCodingContent[] {
    const topicLower = topic.toLowerCase();
    const keywords = topicLower.split(/\s+/);

    return content
      .map(item => ({
        ...item,
        relevanceScore: this.calculateRelevance(item, keywords),
      }))
      .filter(item => item.relevanceScore > 0)
      .sort((a, b) => b.relevanceScore - a.relevanceScore)
      .slice(0, 10) // –ë–µ—Ä–µ–º —Ç–æ–ø-10 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
      .map(({ relevanceScore, ...item }) => item);
  }

  /**
   * –†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private calculateRelevance(
    content: VibeCodingContent,
    keywords: string[]
  ): number {
    let score = 0;
    const searchText = `${content.title} ${
      content.content
    } ${content.concepts.join(' ')} ${content.quotes.join(' ')}`.toLowerCase();

    for (const keyword of keywords) {
      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
      if (content.title.toLowerCase().includes(keyword)) {
        score += 10;
      }

      // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è—Ö
      if (
        content.concepts.some(concept =>
          concept.toLowerCase().includes(keyword)
        )
      ) {
        score += 5;
      }

      // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
      const matches = (searchText.match(new RegExp(keyword, 'g')) || []).length;
      score += matches * 2;
    }

    return score;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  private normalizeCategoryName(category: string): string {
    const categoryMap: Record<string, string> = {
      '01-–û–°–ù–û–í–´': '–æ—Å–Ω–æ–≤—ã',
      '02-–ü–†–ê–ö–¢–ò–ö–ò': '–ø—Ä–∞–∫—Ç–∏–∫–∏',
      '03-–ò–ù–°–¢–†–£–ú–ï–ù–¢–´': '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
      '04-–†–ê–ó–í–ò–¢–ò–ï': '—Ä–∞–∑–≤–∏—Ç–∏–µ',
      '05-–ê–ù–ê–õ–ò–¢–ò–ö–ê': '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      '06-–ê–†–•–ò–í': '–∞—Ä—Ö–∏–≤',
      '07 TELEGRAM –ü–û–°–¢–´': 'telegram',
      root: '–æ—Å–Ω–æ–≤–Ω–æ–µ',
    };

    return categoryMap[category] || category.toLowerCase();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache(): void {
    this.contentCache.clear();
  }
}
